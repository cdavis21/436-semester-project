package com.worldstars.semesterproject436;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;

import android.app.ActionBar;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.DialogInterface;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Toast;
//Adding comment for git test
// Jazmyn Comment
public class MainActivity extends Activity {
	public static final String TAG = "Semester Project";
	private static final String FILE_NAME = "PurchasesList.txt";
	private static final int MENU_DELETE = Menu.FIRST;
	
	private static final String CATEGORY_FOOD = "Food";
	private static final String CATEGORY_ENTERTAINMENT = "Entertainment";
	private static final String CATEGORY_ELECTRONICS = "Electronics";
	private static final String CATEGORY_CLOTHES = "Clothes";
	
	public PurchaseAdapter pAdapter;
	
	ActionBar.Tab purchasesTab, addNewTab, filterTab;
        Fragment purchasesFragmentTab = new PurcahsesFragment();
        Fragment addNewFragmentTab = new AddNewFragment();
        Fragment filterFragmentTab = new SettingsFragment();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // Asking for the default ActionBar element that our platform supports.
        ActionBar actionBar = getActionBar();
        
                // Screen handling while hiding ActionBar icon.
                //actionBar.setDisplayShowHomeEnabled(false);

                // Screen handling while hiding Actionbar title.
                //actionBar.setDisplayShowTitleEnabled(false);

         // Creating ActionBar tabs.
         actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
         
         // Setting custom tab icons.
         purchasesTab = actionBar.newTab().setIcon(R.drawable.listicon);
         addNewTab = actionBar.newTab().setIcon(R.drawable.plussign);
         filterTab = actionBar.newTab().setIcon(R.drawable.settings);
                
         // Setting tab listeners.
         purchasesTab.setTabListener(new TabListener(purchasesFragmentTab));
         addNewTab.setTabListener(new TabListener(addNewFragmentTab));
         filterTab.setTabListener(new TabListener(filterFragmentTab));
               
          // Adding tabs to the ActionBar.
          actionBar.addTab(purchasesTab);
          actionBar.addTab(addNewTab);
          actionBar.addTab(filterTab);
          
  		pAdapter = new PurchaseAdapter(getApplicationContext());
  		ListView list = (ListView) findViewById(R.id.list);
  		list.setAdapter(pAdapter);
  		
  	    final SwipeDetector swipeDetector = new SwipeDetector();
  	    list.setOnTouchListener(swipeDetector);
  	    list.setOnItemClickListener(new OnItemClickListener() {
  	        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
  	                if (swipeDetector.swipeDetected()){
  	                    // do the onSwipe action
  	                	Toast.makeText(getBaseContext(), "swiped!", Toast.LENGTH_LONG).show();
  	                } else {
  	                    // do the onItemClick action
  	                	Toast.makeText(getBaseContext(), "short item click!", Toast.LENGTH_LONG).show();
  	                }
  	            }
  	    });
  	    list.setOnItemLongClickListener(new OnItemLongClickListener() {
  	        @Override
  	        public boolean onItemLongClick(AdapterView<?> parent, View view,int position, long id) {
  	            if (swipeDetector.swipeDetected()){
  	                // do the onSwipe action 
  	            	Toast.makeText(getBaseContext(), "swiped!", Toast.LENGTH_LONG).show();
  	            } else {
  	                // do the onItemLongClick action
  	            	Toast.makeText(getBaseContext(), "long item click!!", Toast.LENGTH_LONG).show();
  	            }
  	            
  	            return true;
  	        }
  	    });
    }
    public class PurcahsesFragment extends Fragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.activity_main, container, false);
            return rootView;
        	
        }
    }
    public class AddNewFragment extends Fragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
        	itemDialog().show();
            //View rootView = inflater.inflate(R.layout.purchase, container, false);
            //return rootView;
        	return null;
        }
    }
    public class SettingsFragment extends Fragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.settings, container, false);
            return rootView;
        	/*
            Intent intent = new Intent(MainActivity.this,SettingsActivity.class);
        	startActivity(intent);
        	return null;
        	*/
        }
    }
	public AlertDialog itemDialog() {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		final View v = getLayoutInflater().inflate(R.layout.add_item_dialog, null);
		
		final Spinner category = (Spinner) v.findViewById(R.id.category_spinner);
		// Create an ArrayAdapter using the string array and a default spinner layout
		ArrayAdapter<CharSequence> categoryAdapter = ArrayAdapter.createFromResource(this,
		        R.array.categories_array, android.R.layout.simple_spinner_item);
		// Specify the layout to use when the list of choices appears
		categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		// Apply the adapter to the spinner
		category.setAdapter(categoryAdapter);
		
		final Spinner subcategory = (Spinner) v.findViewById(R.id.subcategory_spinner);
		category.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				String item = parent.getItemAtPosition(position).toString();
				
				if (item.equals(CATEGORY_FOOD)) {
					// Create an ArrayAdapter using the string array and a default spinner layout
					ArrayAdapter<CharSequence> subcategoryAdapter = ArrayAdapter.createFromResource(getBaseContext(),
					        R.array.subcategory_food, android.R.layout.simple_spinner_item);
					// Specify the layout to use when the list of choices appears
					subcategoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
					// Apply the adapter to the spinner
					subcategory.setAdapter(subcategoryAdapter);
				} else if (item.equals(CATEGORY_CLOTHES)) {
					// Create an ArrayAdapter using the string array and a default spinner layout
					ArrayAdapter<CharSequence> subcategoryAdapter = ArrayAdapter.createFromResource(getBaseContext(),
					        R.array.subcategory_clothes, android.R.layout.simple_spinner_item);
					// Specify the layout to use when the list of choices appears
					subcategoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
					// Apply the adapter to the spinner
					subcategory.setAdapter(subcategoryAdapter);
				} else if (item.equals(CATEGORY_ELECTRONICS)) {
					// Create an ArrayAdapter using the string array and a default spinner layout
					ArrayAdapter<CharSequence> subcategoryAdapter = ArrayAdapter.createFromResource(getBaseContext(),
					        R.array.subcategory_electronics, android.R.layout.simple_spinner_item);
					// Specify the layout to use when the list of choices appears
					subcategoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
					// Apply the adapter to the spinner
					subcategory.setAdapter(subcategoryAdapter);
				} else if (item.equals(CATEGORY_ENTERTAINMENT)) {
					// Create an ArrayAdapter using the string array and a default spinner layout
					ArrayAdapter<CharSequence> subcategoryAdapter = ArrayAdapter.createFromResource(getBaseContext(),
					        R.array.subcategory_entertainment, android.R.layout.simple_spinner_item);
					// Specify the layout to use when the list of choices appears
					subcategoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
					// Apply the adapter to the spinner
					subcategory.setAdapter(subcategoryAdapter);
				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// swag
			}
		});
		
		builder.setView(v);
		builder.setPositiveButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				Log.i(TAG, "canceled");
			}
		});
		
		builder.setNegativeButton("Add Item", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				Log.i(TAG, "added new item");
				String box1 = " " + ((EditText) v.findViewById(R.id.box1)).getText().toString();
				String box2 = " " + ((EditText) v.findViewById(R.id.box2)).getText().toString();
				String box3 = " " + ((Spinner) v.findViewById(R.id.category_spinner)).getSelectedItem().toString();
				String box4 = " " + ((Spinner) v.findViewById(R.id.subcategory_spinner)).getSelectedItem().toString();
				pAdapter.add(new Purchase(box1, box2, box3, box4));
			}
		});
		
		return builder.create();
	}
	
	private void loadItems() {
		BufferedReader reader = null;
		
		try {
			FileInputStream inputStream = openFileInput(FILE_NAME);
			reader = new BufferedReader(new InputStreamReader(inputStream));
			
			String name = null;
			String cost = null;
			String category = null;
			String subcategory = null;
			
			while ((name = reader.readLine()) != null) {
				cost = reader.readLine();
				category = reader.readLine();
				subcategory = reader.readLine();
				pAdapter.add(new Purchase(name, cost, category, subcategory));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	private void saveItems() {
		PrintWriter pWriter = null;
		
		try {
			FileOutputStream outputStream = openFileOutput(FILE_NAME, MODE_PRIVATE);
			pWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
			
			for (int i = 0; i < pAdapter.getCount(); i ++) {
				pWriter.println(pAdapter.getItem(i));
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pWriter != null) {
				pWriter.close();
			}
		}
	}

	@Override
	public void onResume() {
		super.onResume();
		
		if (pAdapter.getCount() == 0) {
			loadItems();
		}
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		saveItems();
	}
	
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        //getMenuInflater().inflate(R.menu.main, menu);
        //return true;
    	
    	super.onCreateOptionsMenu(menu);
    	menu.add(Menu.NONE, MENU_DELETE, Menu.NONE, "Delete all items");
    	return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        switch (item.getItemId()) {
        case MENU_DELETE:
        	pAdapter.clear();
        	return true;
        default:
        	return super.onOptionsItemSelected(item);
    	}	
    }
}
